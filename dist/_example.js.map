{"version":3,"file":"_example.js","sourceRoot":"","sources":["../lib/_example.ts"],"names":[],"mappings":";;;;;;;;AAAA,sBAMU;AACV,wCAAyC;AAKzC,IAAM,SAAS;IAAf;IA4BA,CAAC;IAzBG,8BAAU,GAAV,UAAW,GAAiB,EAAE,GAAkB;QAC5C,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;IAC3B,CAAC;IAGD,4BAAQ,GAAR,UAAS,GAAiB,EAAE,GAAkB;QAC1C,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;IACtB,CAAC;IAGD,gCAAY,GAAZ,UAAa,GAAiB,EAAE,GAAkB;QAC9C,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;QAClB,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IAC5B,CAAC;IAGD,2BAAO,GAAP,UAAQ,GAAiB,EAAE,GAAkB;QACzC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;QACpB,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;IACjC,CAAC;IAGD,+BAAW,GAAX,UAAY,GAAiB,EAAE,GAAkB;QAC7C,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;IACxB,CAAC;IACL,gBAAC;AAAD,CAAC,AA5BD,IA4BC;AAzBG;IADC,cAAW,CAAC,GAAG,EAAE;2CAGjB;AAGD;IADC,cAAW,CAAC,IAAI,EAAE,CAAA,eAAe;yCAGjC;AAGD;IADC,cAAW,CAAC,GAAG,EAAE;6CAIjB;AAGD;IADC,cAAW,CAAC,KAAK,EAAE;wCAInB;AAGD;IADC,cAAW,CAAC,MAAM,EAAE;4CAGpB;AA3BC,SAAS;IAHd,cAAW,CAAC;QACT,UAAU,EAAE,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;KAClC,CAAC;GACI,SAAS,CA4Bd;AAED,iBAAc,CAAC,SAAS,EAAE;IACtB,IAAI,EAAE,IAAI;IACV,OAAO,EAAE,KAAK;IACd,SAAS,EAAE,KAAK;IAChB,QAAQ,EAAE,IAAI;CACjB,CAAC,CAAA","sourcesContent":["import {\n    MicroRouter,\n    MicroMethod,\n    MicroResponse,\n    MicroRequest,\n    MicroBootstrap\n} from '.'\nimport * as bodyParser from 'body-parser'\n\n@MicroRouter({\n    middleware: [bodyParser.json()]\n})\nclass ServerApp {\n\n    @MicroMethod.Get()\n    helloWorld(req: MicroRequest, res: MicroResponse): void {\n        res.send('Hello World')\n    }\n\n    @MicroMethod.Post()// microParser)\n    addHello(req: MicroRequest, res: MicroResponse): void {\n        res.send(req.body)\n    }\n\n    @MicroMethod.Put()\n    putToTheTest(req: MicroRequest, res: MicroResponse): void {\n        console.log('put')\n        res.send(req.body.putty)\n    }\n\n    @MicroMethod.Patch()\n    eyePath(req: MicroRequest, res: MicroResponse): void {\n        console.log('patch')\n        res.send(req.body.patch_name)\n    }\n\n    @MicroMethod.Delete()\n    forgetMeNot(req: MicroRequest, res: MicroResponse): void {\n        res.send('Deleted!')\n    }\n}\n\nMicroBootstrap(ServerApp, {\n    port: 3000,\n    cluster: false,\n    useSocket: false,\n    liteMode: true\n})\n"]}