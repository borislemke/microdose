{"version":3,"file":"bootstrap.js","sourceRoot":"","sources":["../lib/bootstrap.ts"],"names":[],"mappings":"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","sourcesContent":["import * as os from 'os'\nimport * as uws from 'uws'\nimport * as http from 'http'\nimport * as cluster from 'cluster'\nimport {RouteStack} from './route_stack'\n\nimport {microCredits} from './utils/credits'\nimport {PartyRouterStack} from './router'\nconst numCPUs = os.cpus().length\n\nexport interface BootstrapConfig {\n    port?: number\n    cluster?: boolean\n    useSocket?: boolean\n}\n\nfunction startCluster(bootStrap: Function) {\n\n    if (cluster.isMaster) {\n\n        console.log(`Master ${process.pid} is running`)\n\n        for (let i = 0; i < numCPUs; i++) {\n            cluster.fork()\n        }\n\n        cluster.on('exit', (worker, code, signal) => {\n            console.log(`worker ${worker.process.pid} died`)\n        })\n    }\n\n    if (cluster.isWorker) {\n\n        console.log(`Worker ${process.pid} started`)\n\n        bootStrap()\n    }\n}\n\nexport const MicroBootstrap = (serverApp, config: BootstrapConfig | number) => {\n\n    let port\n\n    let clusterize = false\n\n    if (typeof config === 'object') {\n        port = config.port\n        clusterize = config.cluster\n    }\n\n    if (typeof config === 'number') {\n        port = (config as number)\n    }\n\n    if (typeof config === 'undefined') {\n        port = 3000\n    }\n\n    port || (port = 3000)\n\n    const bootStrap = () => {\n\n        const topRoutes = PartyRouterStack.find(_stack => _stack.routerName === serverApp.name)\n\n        if (!topRoutes) {\n            console.log('WARNING: No root handlers found. If you intended not to add any RouterStack items to the main Router, ignore this message.')\n        } else {\n            RouteStack.addStack(...topRoutes.routerStack)\n        }\n\n        const useSocket = config && (config as BootstrapConfig).useSocket\n\n        let server\n\n        /** TODO(opt): Optimize statement */\n        if (useSocket) {\n\n            /**\n             * TODO(opt): do not use global\n             */\n            Object.defineProperty(global, 'USE_SOCKET', {\n                get: () => true\n            })\n\n            console.log('')\n            console.log('\\x1b[33m%s\\x1b[0m', '    WARNING: BootstrapConfig.useSocket is a highly experimental feature. Do not rely on it in production.')\n            console.log('')\n\n            /** @experimental */\n            /** @deprecated */\n            server = uws.http.createServer((req, res) => RouteStack.matchRequest(req, res))\n\n        } else {\n\n            /**\n             * TODO(opt): do not use global\n             */\n            Object.defineProperty(global, 'USE_SOCKET', {\n                get: () => false\n            })\n\n            server = http.createServer((req, res) => RouteStack.matchRequest(req, res))\n        }\n\n        /**\n         * TODO(opt): Return as promise / callback\n         * So the user knows for sure when microdose is up and running\n         */\n        server.listen(port, () => microCredits(port))\n    }\n\n    if (clusterize) {\n        /**\n         * TODO(opt): We might want remove this from the core of microdose and\n         * TODO(opt): leave it to the developer?\n         */\n        startCluster(bootStrap)\n    } else {\n        bootStrap()\n    }\n}\n"]}