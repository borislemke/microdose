{"version":3,"file":"bootstrap.js","sourceRoot":"","sources":["../lib/bootstrap.ts"],"names":[],"mappings":"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","sourcesContent":["import * as http from 'http'\nimport {RouteStack} from './route_stack'\n\nimport {microCredits} from './utils/credits'\nimport {PartyRouterStack} from './router'\n\nexport interface BootstrapConfig {\n    port?: number\n    liteMode?: boolean\n    server?: any\n}\n\nexport const MicroBootstrap = (serverApp, config?: BootstrapConfig | number, cb?: (err?: any) => void) => {\n\n    if (typeof config === 'object') {\n\n        // Default port if not provided\n        config.port || (config.port = 3000)\n\n        // Default server if not provided\n        config.server || (config.server = http)\n\n        if (config.liteMode) {\n\n            /**\n             * Checks if the developer is attempting to use path patterns\n             * despite enabling lite mode.\n             */\n            PartyRouterStack.forEach(_stack => {\n                const conflictingPathUse = _stack.routerStack.find(_childStack => _childStack.path)\n                if (conflictingPathUse) {\n                    console.log('')\n                    console.log('\\x1b[33m%s\\x1b[0m', 'WARNING: Handler with path pattern ' + conflictingPathUse.path\n                        + ' will be ignored in Lite Mode.\\n')\n                }\n            })\n\n            /**\n             * TODO(global): Do not use global namespace\n             * @date - 5/26/17\n             * @time - 12:10 PM\n             */\n            Object.defineProperty(global, 'LITE_MODE', {\n                get: () => true\n            })\n        }\n    }\n\n    // Config passed as number, perceive as port argument\n    if (typeof config === 'number') {\n        config = {\n            server: http,\n            port: config\n        }\n    }\n\n    // No config given, assign default port\n    if (typeof config === 'undefined') {\n        config = {\n            port: 3000,\n            server: http\n        }\n    }\n\n    const topRoutes = PartyRouterStack.find(_stack => _stack.routerName === serverApp.name)\n\n    if (!topRoutes) {\n        console.log('WARNING: No root handlers found. If you intended not to add any RouterStack' +\n            'items to the main Router, ignore this message.')\n    } else {\n        RouteStack.addStack(...topRoutes.routerStack)\n    }\n\n    const server = (config as BootstrapConfig).server.createServer((req, res) => RouteStack.matchRequest(req, res))\n\n    /**\n     * TODO(opt): Return as promise / callback\n     * So the user knows for sure when microdose is up and running\n     */\n    server.listen(config.port, () => {\n\n        if (process.env.NODE_ENV === 'development') {\n\n            microCredits((config as BootstrapConfig).port)\n\n            if ((config as BootstrapConfig).liteMode) {\n                console.log('')\n                console.log('\\x1b[33m%s\\x1b[0m', 'WARNING: LiteMode is enabled. Path matching is disabled and' +\n                    'request will only match request methods.\\n')\n            }\n        }\n\n        cb && cb()\n    })\n}\n"]}