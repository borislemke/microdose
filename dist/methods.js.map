{"version":3,"file":"methods.js","sourceRoot":"","sources":["../lib/methods.ts"],"names":[],"mappings":";;AACA,mCAAyC;AACzC,iDAAiD;AAGjD,IAAM,UAAU,GAAG,UAAC,MAAM,IAAK,OAAA,UAAU,UAA8B,EAAE,gBAAqC;IAE1G,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QACvB,MAAM,IAAI,KAAK,CAAC,6DAA6D,CAAC,CAAA;IAClF,CAAC;IAED,2BAA2B;IAC3B,EAAE,CAAC,CAAC,OAAO,UAAU,KAAK,WAAW,IAAI,OAAO,gBAAgB,KAAK,WAAW,CAAC,CAAC,CAAC;QAC/E,gBAAgB,GAAG,IAAI,CAAA;QACvB,UAAU,GAAG,GAAG,CAAA;IACpB,CAAC;IAED,6CAA6C;IAC7C,EAAE,CAAC,CAAC,OAAO,UAAU,KAAK,UAAU,IAAI,OAAO,gBAAgB,KAAK,WAAW,CAAC,CAAC,CAAC;QAC9E,gBAAgB,GAAI,UAAiC,CAAA;QACrD,UAAU,GAAG,GAAG,CAAA;IACpB,CAAC;IAED,6CAA6C;IAC7C,wEAAwE;IACxE,8CAA8C;IAC9C,UAAU,GAAG,2BAAc,CAAC,UAAoB,CAAC,CAAA;IAEjD,MAAM,CAAC,UAAU,MAAM,EAAE,aAAqB,EAAE,UAAe;QAE3D,kCAAkC;QAClC,IAAI,OAAO,GAAG,UAAU,CAAC,KAAK,CAAA;QAE9B,IAAI,iBAAiB,GAAG,CAAC,CAAC,CAAA;QAE1B,IAAM,kBAAkB,GAAG,yBAAgB,CAAC,IAAI,CAAC,UAAC,MAAM,EAAE,KAAK;YAE3D,iBAAiB,GAAG,KAAK,CAAA;YAEzB,MAAM,CAAC,MAAM,CAAC,UAAU,KAAK,MAAM,CAAC,WAAW,CAAC,IAAI,CAAA;QACxD,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACnB,IAAM,kBAAgB,GAAG,OAAO,CAAA;YAChC,OAAO,GAAG,UAAC,GAAG,EAAE,GAAG;gBACf,OAAA,gBAAgB,CAAC,GAAG,EAAE,GAAG,EAAE,UAAC,IAAI,EAAE,IAAI;oBAClC,OAAA,kBAAgB,CAAC,IAAI,IAAI,GAAG,EAAE,IAAI,IAAI,GAAG,CAAC;gBAA1C,CAA0C,CAAC;YAD/C,CAC+C,CAAA;QACvD,CAAC;QAED,IAAM,SAAS,GAAc;YACzB,MAAM,QAAA;YACN,IAAI,EAAG,UAAqB;YAC5B,OAAO,SAAA;SACV,CAAA;QAED,EAAE,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;YACtB,yBAAgB,CAAC,IAAI,CAAC;gBAClB,UAAU,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;gBACnC,WAAW,EAAE,CAAC,SAAS,CAAC;aAC3B,CAAC,CAAA;QACN,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,yBAAgB,CAAC,iBAAiB,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;QACnE,CAAC;QAED,MAAM,CAAC,UAAU,CAAC,KAAK,CAAA;IAC3B,CAAC,CAAA;AACL,CAAC,EA7D8B,CA6D9B,CAAA;AAEY,QAAA,WAAW,GAAG;IACvB,GAAG,EAAE,UAAU,CAAC,KAAK,CAAC;IACtB,IAAI,EAAE,UAAU,CAAC,MAAM,CAAC;IACxB,GAAG,EAAE,UAAU,CAAC,KAAK,CAAC;IACtB,KAAK,EAAE,UAAU,CAAC,OAAO,CAAC;IAC1B,MAAM,EAAE,UAAU,CAAC,QAAQ,CAAC;CAC/B,CAAA","sourcesContent":["import {MiddlewareFunction} from './middleware'\nimport {PartyRouterStack} from './router'\nimport {ensureURIValid} from './utils/ensure_url'\nimport {StackItem} from './route_stack'\n\nconst baseMethod = (method) => function (methodPath?: string | Function, methodMiddleware?: MiddlewareFunction) {\n\n    if (arguments.length > 2) {\n        throw new Error('@MicroRouter[method] requires exactly 2 parameters. 3 given')\n    }\n\n    // case: @MicroRouter.Get()\n    if (typeof methodPath === 'undefined' && typeof methodMiddleware === 'undefined') {\n        methodMiddleware = null\n        methodPath = '/'\n    }\n\n    // case: @MicroRouter.Get(middlewareFunction)\n    if (typeof methodPath === 'function' && typeof methodMiddleware === 'undefined') {\n        methodMiddleware = (methodPath as MiddlewareFunction)\n        methodPath = '/'\n    }\n\n    // Ensures that the routerStack path is valid\n    // e.g //some-path/that//is/not-valid/// -> /some-path/that/is/not-valid\n    /** TODO(opt): We might need to allow this? */\n    methodPath = ensureURIValid(methodPath as string)\n\n    return function (target, descriptorKey: string, descriptor: any): any {\n\n        // Clone original handler function\n        let handler = descriptor.value\n\n        let indexOfPartyStack = -1\n\n        const existingPartyStack = PartyRouterStack.find((_stack, index) => {\n\n            indexOfPartyStack = index\n\n            return _stack.routerName === target.constructor.name\n        })\n\n        if (methodMiddleware) {\n            const originalFunction = handler\n            handler = (req, res) =>\n                methodMiddleware(req, res, (req2, res2) =>\n                    originalFunction(req2 || req, res2 || res))\n        }\n\n        const stackItem: StackItem = {\n            method,\n            path: (methodPath as string),\n            handler\n        }\n\n        if (!existingPartyStack) {\n            PartyRouterStack.push({\n                routerName: target.constructor.name,\n                routerStack: [stackItem]\n            })\n        } else {\n            PartyRouterStack[indexOfPartyStack].routerStack.push(stackItem)\n        }\n\n        return descriptor.value\n    }\n}\n\nexport const MicroMethod = {\n    Get: baseMethod('GET'),\n    Post: baseMethod('POST'),\n    Put: baseMethod('PUT'),\n    Patch: baseMethod('PATCH'),\n    Delete: baseMethod('DELETE')\n}\n"]}