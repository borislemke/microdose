{"version":3,"file":"methods.js","sourceRoot":"","sources":["../src/methods.ts"],"names":[],"mappings":";;AACA,mCAA2C;AAC3C,iDAAmD;AAGnD,IAAM,UAAU,GAAG,UAAC,MAAM,IAAK,OAAA,UAAU,UAA8B,EAAE,gBAAqC;IAE5G,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;QACxB,MAAM,IAAI,KAAK,CAAC,6DAA6D,CAAC,CAAA;KAC/E;IAED,2BAA2B;IAC3B,IAAI,OAAO,UAAU,KAAK,WAAW,IAAI,OAAO,gBAAgB,KAAK,WAAW,EAAE;QAChF,gBAAgB,GAAG,IAAI,CAAA;QACvB,UAAU,GAAG,GAAG,CAAA;KACjB;IAED,6CAA6C;IAC7C,IAAI,OAAO,UAAU,KAAK,UAAU,IAAI,OAAO,gBAAgB,KAAK,WAAW,EAAE;QAC/E,gBAAgB,GAAI,UAAiC,CAAA;QACrD,UAAU,GAAG,GAAG,CAAA;KACjB;IAED,6CAA6C;IAC7C,wEAAwE;IACxE,8CAA8C;IAC9C,UAAU,GAAG,2BAAc,CAAC,UAAoB,CAAC,CAAA;IAEjD,OAAO,UAAU,MAAM,EAAE,aAAqB,EAAE,UAAe;QAE7D,kCAAkC;QAClC,IAAI,OAAO,GAAG,UAAU,CAAC,KAAK,CAAA;QAE9B,IAAI,iBAAiB,GAAG,CAAC,CAAC,CAAA;QAE1B,IAAM,kBAAkB,GAAG,yBAAgB,CAAC,IAAI,CAAC,UAAC,MAAM,EAAE,KAAK;YAE7D,iBAAiB,GAAG,KAAK,CAAA;YAEzB,OAAO,MAAM,CAAC,UAAU,KAAK,MAAM,CAAC,WAAW,CAAC,IAAI,CAAA;QACtD,CAAC,CAAC,CAAA;QAEF,IAAI,gBAAgB,EAAE;YACpB,IAAM,kBAAgB,GAAG,OAAO,CAAA;YAChC,OAAO,GAAG,UAAC,GAAG,EAAE,GAAG;gBACjB,OAAA,gBAAgB,CAAC,GAAG,EAAE,GAAG,EAAE,UAAC,IAAI,EAAE,IAAI;oBACpC,OAAA,kBAAgB,CAAC,IAAI,IAAI,GAAG,EAAE,IAAI,IAAI,GAAG,CAAC;gBAA1C,CAA0C,CAAC;YAD7C,CAC6C,CAAA;SAChD;QAED,IAAM,SAAS,GAAc;YAC3B,MAAM,QAAA;YACN,IAAI,EAAG,UAAqB;YAC5B,OAAO,SAAA;SACR,CAAA;QAED,IAAI,CAAC,kBAAkB,EAAE;YACvB,yBAAgB,CAAC,IAAI,CAAC;gBACpB,UAAU,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;gBACnC,WAAW,EAAE,CAAC,SAAS,CAAC;aACzB,CAAC,CAAA;SACH;aAAM;YACL,yBAAgB,CAAC,iBAAiB,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;SAChE;QAED,OAAO,UAAU,CAAC,KAAK,CAAA;IACzB,CAAC,CAAA;AACH,CAAC,EA7D8B,CA6D9B,CAAA;AAEY,QAAA,QAAQ,GAAG;IACtB,GAAG,EAAE,UAAU,CAAC,KAAK,CAAC;IACtB,IAAI,EAAE,UAAU,CAAC,MAAM,CAAC;IACxB,GAAG,EAAE,UAAU,CAAC,KAAK,CAAC;IACtB,KAAK,EAAE,UAAU,CAAC,OAAO,CAAC;IAC1B,MAAM,EAAE,UAAU,CAAC,QAAQ,CAAC;CAC7B,CAAA","sourcesContent":["import { MiddlewareFunction } from './middleware'\nimport { PartyRouterStack } from './router'\nimport { ensureURIValid } from './utils/ensure_url'\nimport { StackItem } from './route_stack'\n\nconst baseMethod = (method) => function (methodPath?: string | Function, methodMiddleware?: MiddlewareFunction) {\n\n  if (arguments.length > 2) {\n    throw new Error('@MicroRouter[method] requires exactly 2 parameters. 3 given')\n  }\n\n  // case: @MicroRouter.Get()\n  if (typeof methodPath === 'undefined' && typeof methodMiddleware === 'undefined') {\n    methodMiddleware = null\n    methodPath = '/'\n  }\n\n  // case: @MicroRouter.Get(middlewareFunction)\n  if (typeof methodPath === 'function' && typeof methodMiddleware === 'undefined') {\n    methodMiddleware = (methodPath as MiddlewareFunction)\n    methodPath = '/'\n  }\n\n  // Ensures that the routerStack path is valid\n  // e.g //some-path/that//is/not-valid/// -> /some-path/that/is/not-valid\n  /** TODO(opt): We might need to allow this? */\n  methodPath = ensureURIValid(methodPath as string)\n\n  return function (target, descriptorKey: string, descriptor: any): any {\n\n    // Clone original handler function\n    let handler = descriptor.value\n\n    let indexOfPartyStack = -1\n\n    const existingPartyStack = PartyRouterStack.find((_stack, index) => {\n\n      indexOfPartyStack = index\n\n      return _stack.routerName === target.constructor.name\n    })\n\n    if (methodMiddleware) {\n      const originalFunction = handler\n      handler = (req, res) =>\n        methodMiddleware(req, res, (req2, res2) =>\n          originalFunction(req2 || req, res2 || res))\n    }\n\n    const stackItem: StackItem = {\n      method,\n      path: (methodPath as string),\n      handler\n    }\n\n    if (!existingPartyStack) {\n      PartyRouterStack.push({\n        routerName: target.constructor.name,\n        routerStack: [stackItem]\n      })\n    } else {\n      PartyRouterStack[indexOfPartyStack].routerStack.push(stackItem)\n    }\n\n    return descriptor.value\n  }\n}\n\nexport const uMethods = {\n  get: baseMethod('GET'),\n  post: baseMethod('POST'),\n  put: baseMethod('PUT'),\n  patch: baseMethod('PATCH'),\n  delete: baseMethod('DELETE')\n}\n"]}