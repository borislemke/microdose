{"version":3,"file":"middleware.js","sourceRoot":"","sources":["../src/middleware.ts"],"names":[],"mappings":";;AAeA;;;;;;;;;;;;GAYG;AACU,QAAA,cAAc,GAAG,UAAC,UAAsB,EAAE,cAAwB;IAC7E,UAAU,CAAC,OAAO,EAAE;SACnB,OAAO,CAAC,UAAA,WAAW;QAClB,IAAM,eAAe,GAAG,cAAc,CAAA;QACtC,cAAc,GAAG,UAAC,GAAG,EAAE,GAAG;YACxB,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE,UAAC,IAAI,EAAE,IAAI;gBAC/B,eAAe,CAAC,IAAI,IAAI,GAAG,EAAE,IAAI,IAAI,GAAG,CAAC,CAAA;YAC3C,CAAC,CAAC,CAAA;QACJ,CAAC,CAAA;IACH,CAAC,CAAC,CAAA;IAEF,OAAO,cAAc,CAAA;AACvB,CAAC,CAAA;AAED,SAAgB,WAAW;IAAE,oBAAmC;SAAnC,UAAmC,EAAnC,qBAAmC,EAAnC,IAAmC;QAAnC,+BAAmC;;IAC9D,OAAO,UAAU,MAAW,EAAE,WAA4B,EAAE,UAA8B;QACxF,UAAU,CAAC,KAAK,GAAG,sBAAc,CAAC,UAAU,EAAE,UAAU,CAAC,KAAK,CAAC,CAAA;QAE/D,OAAO,UAAU,CAAA;IACnB,CAAC,CAAA;AACH,CAAC;AAND,kCAMC","sourcesContent":["import { uRequest } from './request'\nimport { uResponse } from './response'\nimport { Request, Response } from 'express'\n\nexport interface NextFunction {\n  (req?: uRequest, res?: uResponse): void\n}\n\nexport interface RequestHandler<Rq extends Request, Rs extends Response> {\n  (req: uRequest & Rq, res: uResponse & Rs, next?: NextFunction): void\n}\n\nexport interface MiddlewareFunction extends RequestHandler<any, any> {\n}\n\n/**\n * Wraps a function inside an array of middlewares / functions.\n * Eg:\n * middlewares = [\n *   fn1,\n *   fn2\n * ]\n * const fn3\n * const fn4 = wrapMiddleware(middlewares, fn3)\n * fn4 => fn2((...params) => fn1((...params) => fn3(...params)))\n * @param middleware\n * @param originalMethod\n */\nexport const wrapMiddleware = (middleware: Function[], originalMethod: Function): Function => {\n  middleware.reverse()\n  .forEach(_middleware => {\n    const originalHandler = originalMethod\n    originalMethod = (req, res) => {\n      _middleware(req, res, (req2, res2) => {\n        originalHandler(req2 || req, res2 || res)\n      })\n    }\n  })\n\n  return originalMethod\n}\n\nexport function uMiddleware (...middleware: MiddlewareFunction[]) {\n  return function (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor): any {\n    descriptor.value = wrapMiddleware(middleware, descriptor.value)\n\n    return descriptor\n  }\n}\n"]}