{"version":3,"file":"request.js","sourceRoot":"","sources":["../lib/request.ts"],"names":[],"mappings":";;AAKA;;;GAGG;AACH;IAmCI,6BAAY,OAAO;QA5BnB;;;;;;;;WAQG;QACH,SAAI,GAAQ,EAAE,CAAA;QAEd;;;;WAIG;QACH,UAAK,GAAQ,EAAE,CAAA;QAEf;;;;;;;WAOG;QACH,WAAM,GAAQ,EAAE,CAAA;QAGZ,IAAI,CAAC,aAAa,GAAG,OAAO,CAAA;IAChC,CAAC;IAEa,0BAAM,GAApB,UAAqB,GAAoB;QAErC,IAAM,aAAa,GAAG,IAAI,mBAAmB,CAAC,GAAG,CAAC,CAAA;QAElD;;;;WAIG;QACH,OAAO;QACP,yDAAyD;QACzD,GAAG,CAAC,CAAC,IAAI,MAAM,IAAI,aAAa,CAAC,CAAC,CAAC;YAC/B,GAAG,CAAC,MAAM,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC,CAAA;QACvC,CAAC;QAED;;;;;WAKG;QAEH;;WAEG;QAEH,MAAM,CAAE,GAAoB,CAAA;IAChC,CAAC;IAED;;;;OAIG;IACI,iCAAG,GAAV,UAAW,GAAW;QAElB,wDAAwD;QACxD,6DAA6D;QAC7D,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,CAAA;IACrE,CAAC;IACL,0BAAC;AAAD,CAAC,AA/ED,IA+EC;AA/EY,kDAAmB","sourcesContent":["import {IncomingMessage} from 'http'\n\nexport interface MicroRequest extends IncomingMessage, MicroRequestBuilder {\n}\n\n/**\n * We might not even need to have the request extended\n * we could theoretically leave it to middleware functions\n */\nexport class MicroRequestBuilder {\n\n    /**\n     * Reference to the nativeResponse Node IncomingMessage\n     */\n    nativeRequest: IncomingMessage\n\n    /**\n     * Injected object from a request payload\n     * e.g @MicroMethod.Post('/users') -> POST http://hostname/users {\"user_name\": \"user\", \"password\": \"1234\"}\n     * body = {\n     *      user_name: \"user\",\n     *      password: \"1234\",\n     * }\n     * @type {{}}\n     */\n    body: any = {}\n\n    /**\n     * Request scoped Object\n     * can be used to store and retrieve values on a per request basis\n     * @type {{}}\n     */\n    local: any = {}\n\n    /**\n     * Params injected from matching URL patterns\n     * e.g @MicroMethod.Get('/users/:userId') -> GET http://hostname/users/johnny\n     * params = {\n     *      userId: johnny // From the URL\n     * }\n     * @type {{}}\n     */\n    params: any = {}\n\n    constructor(request) {\n        this.nativeRequest = request\n    }\n\n    public static create(req: IncomingMessage): MicroRequest {\n\n        const _microRequest = new MicroRequestBuilder(req)\n\n        /**\n         * TODO(opt): Benchmark these\n         * @date - 5/26/17\n         * @time - 2:09 PM\n         */\n        // OPT1\n        // Merges properties of IncomingMessage with MicroRequest\n        for (let method in _microRequest) {\n            req[method] = _microRequest[method]\n        }\n\n        /* OPT2\n         req = {\n         ...toJSON(req),\n         ...toJSON(_microRequest)\n         } as MicroRequest\n         */\n\n        /* OPT3\n         * req = Object.assign({}, toJSON(req), toJSON(_microRequest))\n         */\n\n        return (req as MicroRequest)\n    }\n\n    /**\n     * Is this necessary?\n     * @param key\n     * @returns {string|null}\n     */\n    public get(key: string): string {\n\n        // Look up for a matching key value in the headers first\n        // before looking up inside the request scoped `local` Object\n        return this.nativeRequest.headers(key) || this.local[key] || null\n    }\n}\n"]}