{"version":3,"file":"request.js","sourceRoot":"","sources":["../src/request.ts"],"names":[],"mappings":";;AAKA;;;GAGG;AACH;IAmCE,yBAAa,OAAO;QA5BpB;;;;;;;;WAQG;QACH,SAAI,GAAQ,EAAE,CAAA;QAEd;;;;WAIG;QACH,UAAK,GAAQ,EAAE,CAAA;QAEf;;;;;;;WAOG;QACH,WAAM,GAAQ,EAAE,CAAA;QAGd,IAAI,CAAC,aAAa,GAAG,OAAO,CAAA;IAC9B,CAAC;IAEa,sBAAM,GAApB,UAAsB,GAAoB;QACxC,IAAM,aAAa,GAAG,IAAI,eAAe,CAAC,GAAG,CAAC,CAAA;QAE9C,yDAAyD;QACzD,sDAAsD;QACtD,qCAAqC;QACrC,KAAK,IAAI,MAAM,IAAI,aAAa,EAAE;YAChC,GAAG,CAAC,MAAM,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC,CAAA;SACpC;QAED,OAAQ,GAAgB,CAAA;IAC1B,CAAC;IAED;;;;OAIG;IACI,6BAAG,GAAV,UAAY,GAAW;QAErB,wDAAwD;QACxD,6DAA6D;QAC7D,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,CAAA;IACnE,CAAC;IACH,sBAAC;AAAD,CAAC,AA/DD,IA+DC;AA/DY,0CAAe","sourcesContent":["import { IncomingMessage } from 'http'\n\nexport interface uRequest extends IncomingMessage, uRequestBuilder {\n}\n\n/**\n * We might not even need to have the request extended\n * we could theoretically leave it to middleware functions\n */\nexport class uRequestBuilder {\n\n  /**\n   * Reference to the nativeResponse Node IncomingMessage\n   */\n  nativeRequest: IncomingMessage\n\n  /**\n   * Injected object from a request payload\n   * e.g @MicroMethod.Post('/users') -> POST http://hostname/users {\"user_name\": \"user\", \"password\": \"1234\"}\n   * body = {\n   *      user_name: \"user\",\n   *      password: \"1234\",\n   * }\n   * @type {{}}\n   */\n  body: any = {}\n\n  /**\n   * Request scoped Object\n   * can be used to store and retrieve values on a per request basis\n   * @type {{}}\n   */\n  local: any = {}\n\n  /**\n   * Params injected from matching URL patterns\n   * e.g @MicroMethod.Get('/users/:userId') -> GET http://hostname/users/johnny\n   * params = {\n   *      userId: johnny // From the URL\n   * }\n   * @type {{}}\n   */\n  params: any = {}\n\n  constructor (request) {\n    this.nativeRequest = request\n  }\n\n  public static create (req: IncomingMessage): uRequest {\n    const _microRequest = new uRequestBuilder(req)\n\n    // Merges properties of IncomingMessage with MicroRequest\n    // Based on benchmarks of a couple methods to do this,\n    // this is the most performant of all\n    for (let method in _microRequest) {\n      req[method] = _microRequest[method]\n    }\n\n    return (req as uRequest)\n  }\n\n  /**\n   * Is this necessary?\n   * @param key\n   * @returns {string|null}\n   */\n  public get (key: string): string {\n\n    // Look up for a matching key value in the headers first\n    // before looking up inside the request scoped `local` Object\n    return this.nativeRequest.headers[key] || this.local[key] || null\n  }\n}\n"]}