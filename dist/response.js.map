{"version":3,"file":"response.js","sourceRoot":"","sources":["../lib/response.ts"],"names":[],"mappings":";;AAUA;IAuBI,8BAAY,IAAoB;QAhBhC;;;;WAIG;QACK,gBAAW,GAAoB,GAAG,CAAA;QAE1C;;;;WAIG;QACK,qBAAgB,GAAoB;YACxC,cAAc,EAAE,2BAA2B;SAC9C,CAAA;QAGG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAA;IAC9B,CAAC;IAEa,2BAAM,GAApB,UAAqB,GAAmB;QAEpC,2BAA2B;QAC3B,IAAM,aAAa,GAAG,IAAI,oBAAoB,CAAC,GAAG,CAAC,CAAA;QAEnD,wDAAwD;QACxD,GAAG,CAAC,CAAC,IAAI,MAAM,IAAI,aAAa,CAAC,CAAC,CAAC;YAC/B,GAAG,CAAC,MAAM,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC,CAAA;QACvC,CAAC;QAED,MAAM,CAAE,GAAqB,CAAA;IACjC,CAAC;IAED;;;;OAIG;IACI,kCAAG,GAAV,UAAW,GAAW,EAAE,KAAa;QAEjC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;IAC7C,CAAC;IAED;;;;OAIG;IACI,yCAAU,GAAjB,UAAkB,UAAkB;QAEhC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,EAAE,EAAC,cAAc,EAAE,YAAY,EAAC,CAAC,CAAA;QAEzE,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,CAAA;IAC7B,CAAC;IAED;;;;OAIG;IACI,qCAAM,GAAb,UAAc,UAA2B;QAErC,4CAA4C;QAC5C,IAAI,CAAC,WAAW,GAAG,UAAU,CAAA;QAE7B,iDAAiD;QACjD,8CAA8C;QAC9C,MAAM,CAAG,IAA8B,CAAA;IAC3C,CAAC;IAEM,mCAAI,GAAX,UAAY,OAAa;QAErB,6CAA6C;QAC7C,yBAAyB;QACzB,IAAM,WAAW,GAAG,OAAO,OAAO,CAAA;QAElC,iDAAiD;QACjD,EAAE,CAAC,CAAC,WAAW,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC3B,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAA;QACrC,CAAC;QAED,2BAA2B;QAC3B,OAAO,GAAG,OAAO,IAAI,EAAE,CAAA;QAEvB,IAAM,aAAa,GAAG,OAAO,CAAC,MAAM,CAAA;QAEpC,sCAAsC;QACtC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,gBAAgB,EAAE,aAAa,CAAC,CAAA;QAE9D,sCAAsC;QACtC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAA;IACjD,CAAC;IACL,2BAAC;AAAD,CAAC,AAnGD,IAmGC;AAnGY,oDAAoB","sourcesContent":["import {ServerResponse} from 'http'\nimport {HTTPStatusCodes} from './status_codes'\n\nexport interface MicroResponse extends ServerResponse, MicroResponseBuilder {\n}\n\nexport interface ResponseHeaders {\n    [key: string]: string\n}\n\nexport class MicroResponseBuilder {\n\n    /**\n     * Reference to the original Node ServerResponse object\n     */\n    nativeResponse: ServerResponse\n\n    /**\n     * Default response status code\n     * @type {number}\n     * @private\n     */\n    private _statusCode: HTTPStatusCodes = 200\n\n    /**\n     * Default Content-Type header\n     * @type {ResponseHeaders}\n     * @private\n     */\n    private _responseHeaders: ResponseHeaders = {\n        'Content-Type': 'text/plain; charset=utf-8'\n    }\n\n    constructor(_res: ServerResponse) {\n        this.nativeResponse = _res\n    }\n\n    public static create(res: ServerResponse): MicroResponse {\n\n        // Extended response object\n        const microResponse = new MicroResponseBuilder(res)\n\n        // Merge properties of ServerResponse with MicroResponse\n        for (let method in microResponse) {\n            res[method] = microResponse[method]\n        }\n\n        return (res as MicroResponse)\n    }\n\n    /**\n     * Set header values for the response to be sent. This is just\n     * @param key\n     * @param value\n     */\n    public set(key: string, value: string): void {\n\n        this.nativeResponse.setHeader(key, value)\n    }\n\n    /**\n     * Sends an empty response with the response code only\n     * as the header\n     * @param statusCode\n     */\n    public sendStatus(statusCode: number): void {\n\n        this.nativeResponse.writeHead(statusCode, {'Content-Type': 'text/plain'})\n\n        this.nativeResponse.end()\n    }\n\n    /**\n     * Sets the status code of the current response Object\n     * @param statusCode\n     * @returns {MicroResponse}\n     */\n    public status(statusCode: HTTPStatusCodes): MicroResponse {\n\n        // Sets the status code of the next response\n        this._statusCode = statusCode\n\n        // Force type assertion as TS does not understand\n        // that the Object has been dynamically merged\n        return ((this as any) as MicroResponse)\n    }\n\n    public send(payload?: any): void {\n\n        // Determine what the final payload should be\n        // by analyzing it's type\n        const payloadType = typeof payload\n\n        // Convert payload to string if type is of Object\n        if (payloadType === 'object') {\n            payload = JSON.stringify(payload)\n        }\n\n        // Provide fallback content\n        payload = payload || ''\n\n        const contentLength = payload.length\n\n        // Provide Content-Length header value\n        this.nativeResponse.setHeader('Content-Length', contentLength)\n\n        // End connection and send off payload\n        this.nativeResponse.end(Buffer.from(payload))\n    }\n}\n"]}