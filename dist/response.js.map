{"version":3,"file":"response.js","sourceRoot":"","sources":["../src/response.ts"],"names":[],"mappings":";;;;;;;;;;;;;AACA,+CAAgD;AAQhD;IAsBE,0BAAa,IAAoB;QAfjC;;;;WAIG;QACK,eAAU,GAAoB,GAAG,CAAA;QAWvC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAA;IAC5B,CAAC;IAEa,uBAAM,GAApB,UAAsB,GAAmB;QACvC,4BAA4B;QAC5B,IAAM,aAAa,GAAG,IAAI,gBAAgB,CAAC,GAAG,CAAC,CAAA;QAE/C,qDAAqD;QACrD,KAAK,IAAI,MAAM,IAAI,aAAa,EAAE;YAChC,GAAG,CAAC,MAAM,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC,CAAA;SACpC;QAED,OAAO,GAAgB,CAAA;IACzB,CAAC;IAED;;;;OAIG;IACI,8BAAG,GAAV,UAAY,GAAW,EAAE,KAAa;QACpC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;IAC3C,CAAC;IAED;;;OAGG;IACI,qCAAU,GAAjB,UAAmB,UAAkB;QACnC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,EAAE,gBAAgB,CAAC,sBAAsB,CAAC,CAAA;QAElF,IAAI,UAAU,GAAW,UAAU,GAAG,uBAAuB,CAAA;QAE7D,KAAK,IAAM,IAAI,IAAI,8BAAe,EAAE;YAClC,IAAI,8BAAe,CAAC,IAAI,CAAC,KAAK,UAAiB,EAAE;gBAC/C,UAAU,GAAM,UAAU,UAAK,IAAM,CAAA;aACtC;SACF;QAED,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,UAAU,CAAC,CAAA;QAErC,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,CAAA;IAC3B,CAAC;IAED;;;;OAIG;IACI,iCAAM,GAAb,UAAe,UAA2B;QACxC,6CAA6C;QAC7C,IAAI,CAAC,UAAU,GAAG,UAAU,CAAA;QAE5B,iEAAiE;QACjE,+BAA+B;QAC/B,OAAO,IAAW,CAAA;IACpB,CAAC;IAEM,+BAAI,GAAX,UAAa,OAAa;QACxB,+DAA+D;QAC/D,QAAQ;QACR,IAAM,WAAW,GAAG,OAAO,OAAO,CAAA;QAElC,kDAAkD;QAClD,IAAI,WAAW,KAAK,QAAQ,EAAE;YAC5B,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAA;SAClC;QAED,4BAA4B;QAC5B,OAAO,GAAG,OAAO,IAAI,EAAE,CAAA;QAEvB,IAAM,aAAa,GAAG,OAAO,CAAC,MAAM,CAAA;QAEpC,IAAI,CAAC,cAAc,CAAC,SAAS,CAC3B,IAAI,CAAC,UAAU,eAEV,gBAAgB,CAAC,sBAAsB;YAC1C,uCAAuC;YACvC,gBAAgB,EAAE,aAAa,IAElC,CAAA;QAED,uCAAuC;QACvC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAA;IAC/C,CAAC;IA7FD;;;OAGG;IACI,uCAAsB,GAAoB;QAC/C,cAAc,EAAE,2BAA2B;KAC5C,CAAA;IAwFH,uBAAC;CAAA,AA5GD,IA4GC;AA5GY,4CAAgB","sourcesContent":["import { ServerResponse } from 'http'\nimport { HTTPStatusCodes } from './status_codes'\n\nexport type uResponse = ServerResponse & uResponseBuilder\n\nexport interface ResponseHeaders {\n  [key: string]: string\n}\n\nexport class uResponseBuilder {\n\n  /**\n   * Reference to the original Node ServerResponse object.\n   */\n  nativeResponse: ServerResponse\n\n  /**\n   * Default response status code.\n   * @type {number}\n   * @private\n   */\n  private statusCode: HTTPStatusCodes = 200\n\n  /**\n   * Default Content-Type header.\n   * @type {ResponseHeaders}\n   */\n  static defaultResponseHeaders: ResponseHeaders = {\n    'Content-Type': 'text/plain; charset=utf-8'\n  }\n\n  constructor (_res: ServerResponse) {\n    this.nativeResponse = _res\n  }\n\n  public static create (res: ServerResponse): uResponse {\n    // Extended response object.\n    const microResponse = new uResponseBuilder(res)\n\n    // Merge properties of ServerResponse with uResponse.\n    for (let method in microResponse) {\n      res[method] = microResponse[method]\n    }\n\n    return res as uResponse\n  }\n\n  /**\n   * Set header values for the response to be sent. This is just...\n   * @param key\n   * @param value\n   */\n  public set (key: string, value: string): void {\n    this.nativeResponse.setHeader(key, value)\n  }\n\n  /**\n   * Sends an empty response with the response code only as the header.\n   * @param statusCode\n   */\n  public sendStatus (statusCode: number): void {\n    this.nativeResponse.writeHead(statusCode, uResponseBuilder.defaultResponseHeaders)\n\n    let statusText: string = statusCode + ': UNKNOWN STATUS CODE'\n\n    for (const text in HTTPStatusCodes) {\n      if (HTTPStatusCodes[text] === statusCode as any) {\n        statusText = `${statusCode}: ${text}`\n      }\n    }\n\n    this.nativeResponse.write(statusText)\n\n    this.nativeResponse.end()\n  }\n\n  /**\n   * Sets the status code of the current response Object.\n   * @param statusCode\n   * @returns {uResponse}\n   */\n  public status (statusCode: HTTPStatusCodes): uResponse {\n    // Sets the status code of the next response.\n    this.statusCode = statusCode\n\n    // Force type assertion as TS does not understand that the Object\n    // has been dynamically merged.\n    return this as any\n  }\n\n  public send (payload?: any): void {\n    // Determine what the final payload should be by analyzing it's\n    // type.\n    const payloadType = typeof payload\n\n    // Convert payload to string if type is of Object.\n    if (payloadType === 'object') {\n      payload = JSON.stringify(payload)\n    }\n\n    // Provide fallback content.\n    payload = payload || ''\n\n    const contentLength = payload.length\n\n    this.nativeResponse.writeHead(\n      this.statusCode,\n      {\n        ...uResponseBuilder.defaultResponseHeaders,\n        // Provide Content-Length header value.\n        'Content-Length': contentLength\n      }\n    )\n\n    // End connection and send off payload.\n    this.nativeResponse.end(Buffer.from(payload))\n  }\n}\n"]}