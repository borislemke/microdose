{"version":3,"file":"response.js","sourceRoot":"","sources":["../lib/response.ts"],"names":[],"mappings":";;AAaA;IAwBI,8BAAY,IAAoB;QAlBhC;;;;WAIG;QACK,gBAAW,GAAoB,GAAG,CAAA;QAG1C;;;;WAIG;QACK,qBAAgB,GAAG;YACvB,cAAc,EAAE,2BAA2B;SAC9C,CAAA;QAIG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAA;IACtB,CAAC;IAGa,2BAAM,GAApB,UAAqB,GAAmB;QAEpC,IAAM,aAAa,GAAG,IAAI,oBAAoB,CAAC,GAAG,CAAC,CAAA;QAEnD;;WAEG;QACH,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,aAAa,CAAC,CAAC,CAAC;YAC7B,GAAG,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,IAAI,CAAC,CAAA;QACnC,CAAC;QAED,MAAM,CAAE,GAAqB,CAAA;IACjC,CAAC;IAGD,kCAAG,GAAH,UAAI,GAAW,EAAE,KAAa;QAE1B,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;IACrC,CAAC;IAGD;;;;OAIG;IACH,qCAAM,GAAN,UAAO,UAA2B;QAE9B,IAAI,CAAC,WAAW,GAAG,UAAU,CAAA;QAE7B,uFAAuF;QACvF,MAAM,CAAG,IAA8B,CAAA;IAC3C,CAAC;IAGM,mCAAI,GAAX,UAAY,OAAa;QAErB,IAAM,WAAW,GAAG,OAAO,OAAO,CAAA;QAElC,EAAE,CAAC,CAAC,WAAW,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC3B,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAA;QACrC,CAAC;QAED,OAAO,GAAG,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QAEzC,OAAO,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC,CAAA;QAElC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,gBAAgB,EAAE,OAAO,CAAC,MAAM,CAAC,CAAA;QAEvD;;;;WAIG;QACH,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAExB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAA;QAClE,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;IAC5B,CAAC;IACL,2BAAC;AAAD,CAAC,AA1FD,IA0FC;AA1FY,oDAAoB","sourcesContent":["import {ServerResponse} from 'http'\nimport {HTTPStatusCodes} from './status_codes'\n\n\nexport interface MicroResponse extends ServerResponse, MicroResponseBuilder {\n}\n\n\nexport interface ResponseHeaders {\n    [key: string]: string\n}\n\n\nexport class MicroResponseBuilder {\n\n\n    native: ServerResponse\n\n\n    /**\n     * Default response status code\n     * @type {number}\n     * @private\n     */\n    private _statusCode: HTTPStatusCodes = 200\n\n\n    /**\n     * Default Content-Type header\n     * @type {ResponseHeaders}\n     * @private\n     */\n    private _responseHeaders = {\n        'Content-Type': 'text/plain; charset=utf-8'\n    }\n\n\n    constructor(_res: ServerResponse) {\n        this.native = _res\n    }\n\n\n    public static create(res: ServerResponse): MicroResponse {\n\n        const microResponse = new MicroResponseBuilder(res)\n\n        /**\n         * Merge ServerResponse with original MicroResponse\n         */\n        for (let meth in microResponse) {\n            res[meth] = microResponse[meth]\n        }\n\n        return (res as MicroResponse)\n    }\n\n\n    set(key: string, value: string): void {\n\n        this.native.setHeader(key, value)\n    }\n\n\n    /**\n     * Sets the status code of the current response Object\n     * @param statusCode\n     * @returns {MicroResponse}\n     */\n    status(statusCode: HTTPStatusCodes): MicroResponse {\n\n        this._statusCode = statusCode\n\n        // Force type assertion as TS does not understand that the Object is dynamically merged\n        return ((this as any) as MicroResponse)\n    }\n\n\n    public send(payload?: any): void {\n\n        const payloadType = typeof payload\n\n        if (payloadType === 'object') {\n            payload = JSON.stringify(payload)\n        }\n\n        payload = payload && Buffer.from(payload)\n\n        payload || (payload = 'undefined')\n\n        this.native.setHeader('Content-Length', payload.length)\n\n        /**\n         * TODO(experimental): Optimize\n         * @date - 5/25/17\n         * @time - 2:32 AM\n         */\n        if (!global['USE_SOCKET']) {\n\n            this.native.writeHead(this._statusCode, this._responseHeaders)\n        }\n\n        this.native.end(payload)\n    }\n}\n"]}