{"version":3,"file":"router.js","sourceRoot":"","sources":["../src/router.ts"],"names":[],"mappings":";;AAAA,2CAAiE;AACjE,iDAAmD;AACnD,6CAA0C;AAa7B,QAAA,gBAAgB,GAAkB,EAAE,CAAA;AAEjD,SAAgB,OAAO,CAAE,MAA0B;IAA1B,uBAAA,EAAA,WAA0B;IAE/C,IAAA,kBAAW,EAAX,gCAAW,EACX,oBAAa,EAAb,kCAAa,EACb,8BAAU,CACF;IAEV,OAAO,UAAU,MAAM;QACrB,IAAI,QAAQ,EAAE;YACZ,QAAQ,CAAC,OAAO,CAAC,UAAA,MAAM;gBACrB;;;mBAGG;gBACH,IAAM,mBAAmB,GAAG,wBAAgB,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,UAAU,KAAK,MAAM,CAAC,IAAI,EAA5B,CAA4B,CAAC,CAAA;gBAEpF,IAAI,mBAAmB,IAAI,mBAAmB,CAAC,WAAW,CAAC,MAAM,EAAE;oBACjE,wBAAgB,CAAC,MAAM,CAAC,wBAAgB,CAAC,OAAO,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC,CAAA;oBAEzE,mBAAmB;yBAClB,WAAW;yBACX,OAAO,CAAC,UAAA,MAAM;wBACb,MAAM,CAAC,IAAI,GAAG,2BAAc,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,CAAA;wBAEhE,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,EAAE;4BACnC,MAAM,CAAC,OAAO,GAAG,2BAAc,CAAC,UAAU,EAAE,MAAM,CAAC,OAAO,CAAC,CAAA;yBAC5D;wBAED,wBAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;oBAC7B,CAAC,CAAC,CAAA;iBACH;YACH,CAAC,CAAC,CAAA;SACH;QAED,IAAM,MAAM,GAAG,wBAAgB;aAC9B,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,UAAU,KAAK,MAAM,CAAC,IAAI,EAAjC,CAAiC,CAAC,CAAA;QAElD,MAAM,IAAI,MAAM,CAAC,WAAW,IAAI,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,UAAA,KAAK;YAC9D,+DAA+D;YAC/D,KAAK,CAAC,IAAI,GAAG,2BAAc,CAAC,MAAM,EAAE,KAAK,CAAC,IAAI,CAAC,CAAA;YAE/C;;;;eAIG;YACH,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,EAAE;gBACnC,KAAK,CAAC,OAAO,GAAG,2BAAc,CAAC,UAAU,EAAE,KAAK,CAAC,OAAO,CAAC,CAAA;aAC1D;YAED,wBAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;QAC5B,CAAC,CAAC,CAAA;QAEF,OAAO,MAAM,CAAA;IACf,CAAC,CAAA;AACH,CAAC;AAvDD,0BAuDC","sourcesContent":["import { MiddlewareFunction, wrapMiddleware } from './middleware'\nimport { ensureURIValid } from './utils/ensure_url'\nimport { RouteStack } from './route_stack'\n\nexport interface IRouterConfig {\n  prefix?: string\n  children?: any[]\n  middleware?: MiddlewareFunction[]\n}\n\nexport interface IPartyStack {\n  routerName: string\n  routerStack: any[]\n}\n\nexport const PartyRouterStack: IPartyStack[] = []\n\nexport function uRouter (config: IRouterConfig = {}) {\n  const {\n    prefix = '',\n    children = [],\n    middleware\n  } = config\n\n  return function (target): any {\n    if (children) {\n      children.forEach(rChild => {\n        /**\n         * Look up for a RouterStack that is a direct child of the current RouterStack\n         * @type {IPartyStack}\n         */\n        const partyRouterChildren = PartyRouterStack.find(r => r.routerName === rChild.name)\n\n        if (partyRouterChildren && partyRouterChildren.routerStack.length) {\n          PartyRouterStack.splice(PartyRouterStack.indexOf(partyRouterChildren), 1)\n\n          partyRouterChildren\n          .routerStack\n          .forEach(cRoute => {\n            cRoute.path = ensureURIValid(prefix, rChild.prefix, cRoute.path)\n\n            if (middleware && middleware.length) {\n              cRoute.handler = wrapMiddleware(middleware, cRoute.handler)\n            }\n\n            RouteStack.addStack(cRoute)\n          })\n        }\n      })\n    }\n\n    const rStack = PartyRouterStack\n    .find(_stack => _stack.routerName === target.name)\n\n    rStack && rStack.routerStack && rStack.routerStack.forEach(stack => {\n      // Apply Router and Router children scoped `prefix` if provided\n      stack.path = ensureURIValid(prefix, stack.path)\n\n      /**\n       * Wrap all functions inside a MiddlewareFunction if provided.\n       * The order of the middleware MUST be reversed before being???\n       * applied.\n       */\n      if (middleware && middleware.length) {\n        stack.handler = wrapMiddleware(middleware, stack.handler)\n      }\n\n      RouteStack.addStack(stack)\n    })\n\n    return target\n  }\n}\n"]}