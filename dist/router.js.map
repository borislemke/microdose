{"version":3,"file":"router.js","sourceRoot":"","sources":["../lib/router.ts"],"names":[],"mappings":"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","sourcesContent":["import {MiddlewareFunction} from './middleware'\nimport {RouteStack} from './route_stack'\nimport {ensureURIValid} from './utils/ensure_url'\n\nexport interface RouterChild {\n    prefix: string\n    router: Function\n}\n\nexport interface RouterConfig {\n    prefix?: string\n    children?: RouterChild[]\n    middleware?: MiddlewareFunction[]\n}\n\nexport interface PartyStack {\n    routerName: string\n    routerStack: any[]\n}\n\nexport const PartyRouterStack: PartyStack[] = []\n\nexport function MicroRouter(config: RouterConfig = null) {\n\n    return function (target): any {\n\n        /** TODO(opt): Optimise if conditions */\n        if (config) {\n\n            const routerPrefix = config.prefix || ''\n\n            if (config.children) {\n\n                config.children.forEach(_routerChild => {\n\n                    /**\n                     * Look up for a RouterStack that is a direct child of the current RouterStack\n                     * @type {PartyStack}\n                     */\n                    const partyRouterChildren = PartyRouterStack.find((_stack, index) =>\n                    _stack.routerName === _routerChild.router.name)\n\n                    /**\n                     * If the current RouterStack has any children,\n                     * we want to apply the prefix for each of their handlers\n                     */\n                    if (partyRouterChildren && partyRouterChildren.routerStack.length) {\n\n                        partyRouterChildren\n                        .routerStack\n                        .forEach(_childRoute => {\n\n                            _childRoute.path = ensureURIValid(routerPrefix, _routerChild.prefix, _childRoute.path)\n\n                            if (config.middleware && config.middleware.length) {\n\n                                const originalHandler = _childRoute.handler\n\n                                config.middleware\n                                .forEach(_middleware => {\n                                    _childRoute.handler = (req, res) =>\n                                        _middleware(req, res, (req2, res2) =>\n                                            originalHandler(req2 || req, res2 || res))\n                                })\n                            }\n\n                            RouteStack.addStack(_childRoute)\n                        })\n                    }\n                })\n            }\n\n            if (config.middleware || config.prefix) {\n\n                const _routerStack = PartyRouterStack.find(_stack => _stack.routerName === target.name)\n\n                if (_routerStack) {\n\n                    _routerStack.routerStack = _routerStack.routerStack.map(_stack => {\n\n                        // Apply Router and Router children scoped `prefix` if provided\n                        _stack.path = ensureURIValid(routerPrefix, _stack.path)\n\n                        return _stack\n                    })\n\n                    /**\n                     * Wrap all functions inside a MiddlewareFunction if provided\n                     */\n                    if (config.middleware) {\n\n                        config.middleware.forEach(_middleware => {\n\n                            _routerStack.routerStack.forEach((_stack, index) => {\n\n                                const originalHandler = _stack.handler\n\n                                _stack.handler = (req, res) =>\n                                    _middleware(req, res, (req2, res2) =>\n                                        originalHandler(req2 || req, res2 || res))\n                            })\n                        })\n                    }\n                }\n            }\n        }\n        return target\n    }\n}\n"]}